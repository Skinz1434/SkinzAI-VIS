version: '3.8'

services:
  # PostgreSQL Database with pgvector
  postgres:
    image: ankane/pgvector:latest
    container_name: va-claims-db
    environment:
      POSTGRES_DB: va_claims
      POSTGRES_USER: va_admin
      POSTGRES_PASSWORD: ${DB_PASSWORD:-securepass123}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - va-claims-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U va_admin -d va_claims"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: va-claims-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - va-claims-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: va-claims-backend
    environment:
      DATABASE_URL: postgresql://va_admin:${DB_PASSWORD:-securepass123}@postgres:5432/va_claims
      REDIS_URL: redis://redis:6379
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000}
    volumes:
      - ./backend:/app
      - ./data/uploads:/app/uploads
      - ./data/processed:/app/processed
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - va-claims-network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker for Background Tasks
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: va-claims-celery
    environment:
      DATABASE_URL: postgresql://va_admin:${DB_PASSWORD:-securepass123}@postgres:5432/va_claims
      REDIS_URL: redis://redis:6379
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    volumes:
      - ./backend:/app
      - ./data/uploads:/app/uploads
      - ./data/processed:/app/processed
    depends_on:
      - redis
      - postgres
    networks:
      - va-claims-network
    command: celery -A app.core.celery worker --loglevel=info --concurrency=4

  # Celery Beat for Scheduled Tasks
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: va-claims-celery-beat
    environment:
      DATABASE_URL: postgresql://va_admin:${DB_PASSWORD:-securepass123}@postgres:5432/va_claims
      REDIS_URL: redis://redis:6379
    volumes:
      - ./backend:/app
    depends_on:
      - redis
      - postgres
    networks:
      - va-claims-network
    command: celery -A app.core.celery beat --loglevel=info

  # Flower for Celery Monitoring
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: va-claims-flower
    environment:
      CELERY_BROKER_URL: redis://redis:6379
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - va-claims-network
    command: celery -A app.core.celery flower --port=5555

  # Frontend (if running separately)
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: va-claims-frontend
  #   environment:
  #     NEXT_PUBLIC_API_URL: http://backend:8000
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - backend
  #   networks:
  #     - va-claims-network

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: va-claims-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites:/etc/nginx/sites-enabled
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - va-claims-network

networks:
  va-claims-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: